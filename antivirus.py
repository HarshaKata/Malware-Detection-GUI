import os 
import hashlib 
import tkinter as tk 
from tkinter import * 
from tkinter import filedialog 
from tkinter import messagebox 
import requests 
import shutil 
import subprocess

class AntiVirus:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Anti-Virus")
        self.root.geometry("400x600")
        self.root.configure(bg='white')
        
        #creating buttons
        self.scan_button = Button(self.root,text="Scan",command=self.scan,width=10) 
        self.scan_button.pack(pady=10)
        
        self.quarantine_button = Button(self.root,text="Quarantine",command=self.quarantine,width=10) 
        self.quarantine_button.pack(pady=10)
        
        self.update_button = Button(self.root,text="Update",command=self.update,width=10) 
        self.update_button.pack(pady=10)
        
        self.fullscan_button = Button(self.root,text="Full Scan",command=self.fullscan,width=10) 
        self.fullscan_button.pack(pady=10)
        
        self.root.mainloop()

    def check_size(self, file):
        try:
            fileSize = os.path.getsize(file)
            return self.convert_bytes(fileSize)
        except:
            return None

    def convert_bytes(self, size):
        for x in ['bytes', 'KB', 'MB', 'GB', 'TB']: 
            if size < 1024.0:
                return "%3.1f %s" % (size, x) 
            size /= 1024.0

    def get_hash(self,file): 
        BLOCK_SIZE = 65536
        file_hash = hashlib.md5() 
        try:
            with open(file, 'rb') as f: 
                fb = f.read(BLOCK_SIZE) 
                while len(fb) > 0: 
                    file_hash.update(fb) 
                    fb = f.read(BLOCK_SIZE) 
            return file_hash.hexdigest()
        except:
            return None

    def check_hash_with_hashfile(self, file):
        hash_file = self.get_hash(file)
        infected = False
        
        try:
            with open("hashes.txt", 'r') as f: 
                content = f.readlines()
        except:
            content = []
            
        for line in content:
            if hash_file in line:
                infected = True 
                break
        return infected

    def check_temp(self):
        temp_dir = os.getenv('temp') 
        files = []
        for dirpath, dirnames, filenames in os.walk(temp_dir): 
            for file in filenames:
                files.append(os.path.join(dirpath, file))
                
        for file in files:
            if self.check_hash_with_hashfile(file):
                msg = messagebox.askquestion("Threat Found!", "Do you want to delete file: "+file) 
                if msg == "yes":
                    os.remove(file)

    def quarantine_file(self, file):
        shutil.move(file, "quarantine")

    def scan(self):
        file = filedialog.askopenfilename()
        hash_file = self.get_hash(file)
        infected = False
        
        try:
            with open("hashes.txt", 'r') as f: 
                content = f.readlines()
        except:
            content = []
            
        for line in content:
            if hash_file in line:
                infected = True 
                break
                
        if infected:
            msg = messagebox.askquestion("Threat Found!", "Do you want to move file to quarantine?") 
            if msg == "yes":
                shutil.move(file, "quarantine")
                messagebox.showinfo("Success!", "File moved to quarantine")
        else:
            messagebox.showinfo("Complete", "No threat found!")

    def quarantine(self):
        quarantine_dir = "quarantine"
        quarantine_files = os.listdir(quarantine_dir)
        
        win = Toplevel()
        win.title("Quarantined Files") 
        win.geometry("400x400")
        
        Label(win, text="Files in Quarantine", font=('Helvetica 12 bold')).pack(pady=10)
        
        listbox = Listbox(win) 
        listbox.pack(pady=10)
        
        for file in quarantine_files: 
            listbox.insert(END, file)
            
        def delete_file():
            try:
                selected = listbox.get(listbox.curselection())
                file_path = os.path.join(quarantine_dir, selected) 
                os.remove(file_path)
                messagebox.showinfo("Success!", "File Deleted Successfully!") 
                listbox.delete(listbox.curselection())
            except:
                messagebox.showerror("Error!", "Please select a file to delete!")
                
        def restore_file():
            try:
                selected = listbox.get(listbox.curselection())
                file_path = os.path.join(quarantine_dir, selected)
                shutil.move(file_path, os.path.dirname(os.path.abspath(__file__))) 
                messagebox.showinfo("Success!", "File Restored Successfully!") 
                listbox.delete(listbox.curselection())
            except:
                messagebox.showerror("Error!", "Please select a file to restore!")
                
        Button(win, text="Delete", command=delete_file).pack(pady=5) 
        Button(win, text="Restore", command=restore_file).pack(pady=5)

    def full_scan_dir(self, dir_path):
        files = []
        infected_files = []
        clean_files = []
        
        for dirpath, dirnames, filenames in os.walk(dir_path): 
            for file in filenames:
                files.append(os.path.join(dirpath, file))
                
        for file in files:
            hash_file = self.get_hash(file) 
            infected = False
            
            try:
                with open("hashes.txt", 'r') as f: 
                    content = f.readlines()
            except:
                content = []
                
            for line in content:
                if hash_file in line:
                    infected = True
                    infected_files.append(file) 
                    shutil.move(file, "quarantine") 
                    break
                    
            if not infected:
                clean_files.append(file)
                
        with open("clean_files.txt", "w") as f: 
            for file in clean_files:
                f.write(file + "\n")
                
        messagebox.showinfo("Complete", f"Scan Complete!\nInfected Files: {len(infected_files)}\nClean Files: {len(clean_files)}")

    def update(self):
        hashesList = []
        url = "https://virusshare.com/hashes" 
        r = requests.get(url, allow_redirects=True) 
        open("hashes.txt", "wb").write(r.content) 
        messagebox.showinfo("Success!", "Successfully updated!")

    def fullscan(self):
        files = []
        infected_files = []
        clean_files = []
        
        for dirpath, dirnames, filenames in os.walk("."): 
            for file in filenames:
                files.append(os.path.join(dirpath, file))
                
        for file in files:
            hash_file = self.get_hash(file) 
            infected = False
            
            try:
                with open("hashes.txt", 'r') as f: 
                    content = f.readlines()
            except:
                content = []
                
            for line in content:
                if hash_file in line:
                    infected = True
                    infected_files.append(file) 
                    shutil.move(file, "quarantine") 
                    break
                    
            if not infected:
                clean_files.append(file)
                
        with open("clean_files.txt", "w") as f: 
            for file in clean_files:
                f.write(file + "\n")
                
        messagebox.showinfo("Complete", f"Scan Complete!\nInfected Files: {len(infected_files)}\nClean Files: {len(clean_files)}")

    def check_duplicate(self, file):
        files = []
        
        for dirpath, dirnames, filenames in os.walk("."): 
            for f in filenames:
                path = os.path.join(dirpath, f) 
                if path != file:
                    files.append(path)
                    
        file_hash = self.get_hash(file)
        
        for f in files:
            if self.get_hash(f) == file_hash: 
                return True
        return False

if __name__ == "__main__": 
    av = AntiVirus()